version: '3.5'

networks:
  my_docker_net:
    driver: bridge
services: #表示这是一组服务 
### NGINX Server #########################################
  nginx:
    build: 
      context: 'docker-build/nginx'
    container_name: nginx
    volumes: 
      - ${WORKSPACE}:/var/www:cached
      - ${NGINX_HOST_LOG_PATH}:/var/log/nginx
      - './docker-build/nginx/sites/:/etc/nginx/sites-available'
      # - './docker-build/qnginx/nginx:/etc/nginx'
    ports: 
      - "3070-3099:70-99"
    restart: always #docker服务重启后nginx的docker容器也重启
    links:
      - php-71 # 连接php的docker容器 会在host文件生成 php 192.169.1.101(php 容器的局域网ip)
      - php-80 # 连接php的docker容器 会在host文件生成 php 192.169.1.101(php 容器的局域网ip)
      - php-81 # 连接php的docker容器 会在host文件生成 php 192.169.1.101(php 容器的局域网ip)
    networks:
      - my_docker_net
  redis:
    build:
      context: docker-build/redis
    # image: redis
    container_name: redis
    restart: always #docker服务重启后nginx的docker容器也重启
    ports:
      - "6379:6379" #映射的端口，redis容器的6379端口映射到本地的6379端口，可以通过ip:6379访问容器
    networks:
      - my_docker_net
    volumes:
      # 挂载数据目录
      - ${DOCKER_DATA_PATH}${REDIS_DATA_PATH}:/data
  mysql:
    build:
      context: docker-build/mysql
    # image: mysql #应用的mysql的镜像名称
    container_name: mysql #应用的mysql的镜像名称
    restart: always #docker服务重启后nginx的docker容器也重启
    ports:
      - "3306:3306" #映射的端口，redis容器的6379端口映射到本地的6379端口，可以通过ip:6379访问容器
    environment:
      MYSQL_ROOT_PASSWORD: root_password # root用户的密码
      MYSQL_USER: user # 创建新用户
      MYSQL_PASSWORD: user_password # 新用户的密码
    volumes:
      # - ${DOCKER_DATA_PATH}mysql-conf:/etc/mysql #本地mysql映射到docker
      - ${DOCKER_DATA_PATH}${MYSQL_DATA_PATH}:/var/lib/mysql #本地mysql映射到docker
    networks:
      - my_docker_net
  mongo:
    build:
      context: docker-build/mongodb
    # image: mongo
    container_name: mongo
    restart: always #docker服务重启后nginx的docker容器也重启
    ports:
      - "27017:27017" #映射的端口，redis容器的6379端口映射到本地的6379端口，可以通过ip:6379访问容器
    volumes:
      # 挂载数据目录
      - ${DOCKER_DATA_PATH}${MONGODB_DATA_PATH}:/data/db
    networks:
      - my_docker_net
  php-71:
    working_dir: /var/www
    build:
        context: ./docker-build/php-7.1
        dockerfile: Dockerfile
        # args:
            # WWWGROUP: '${WWWGROUP:-20}'
    container_name: php-71 #应用的mysql的镜像名称
    restart: always #docker服务重启后nginx的docker容器也重启
    image: php-71
    expose:
      - "9000"
    environment:
        LARAVEL_SAIL: 1
    volumes:
        - ${WORKSPACE}:/var/www:cached
    networks:
      - my_docker_net
    extra_hosts:
      - "controler1.srvmgr.service.58dns.org:192.168.67.224"
      - "controler2.srvmgr.service.58dns.org:192.168.67.224"
      - "controler3.srvmgr.service.58dns.org:192.168.67.224"
      - "controler4.srvmgr.service.58dns.org:192.168.67.224"
      - "flux.collector.srvmgr.58dns.org:192.168.67.224"
      - "fluxcontrol.collector.srvmgr.58dns.org:192.168.67.224"
      - "srvmgrregist1.service.58dns.org:192.168.67.224"
      - "srvmgrregist2.service.58dns.org:192.168.67.224"
      - "srvmgrregist3.service.58dns.org:192.168.67.224"
      - "srvmgrregist4.service.58dns.org:192.168.67.224"
      - "wconfig.58dns.org :10.9.196.118"
      - "static.58.com:172.29.200.239"
      - "j1.58cdn.com.cn:172.29.200.239"
      - "j2.58cdn.com.cn:172.29.200.239"
      - "c.58cdn.com.cn:172.29.200.239"
      - "img.58cdn.com.cn:172.29.200.239"
      - "forgelogin.58v5.com:172.29.64.47"
      - "te.union.vip.58.com:192.168.178.19"
      - "sso.test.58.com:192.168.177.150"
      - "t.union.web.58dns.org:192.168.178.19"
      - "transaction-ifang.58v5.cn:172.29.56.60"
      - "open-ifang.58v5.cn:172.29.56.60"
      - "financeapi-ifang.58v5.cn:172.29.56.60"
      - "api-ifang.58v5.cn:172.29.56.60"
      - "dmapi-ifang.58v5.cn:172.29.56.60"
      - "imapi-ifang.58v5.cn:172.29.56.60"
      - "cmapi-ifang.58v5.cn:172.29.56.60"
      - "ifang.58v5.cn:172.29.56.60"
      - "ifangapi.58v5.cn:172.29.56.60"
      - "ifangdkt.58v5.cn:172.29.56.60"
      - "ifangapi-rewardapi.58v5.cn:172.29.56.60"
      - "daiketong.58v5.cn:172.29.56.60"
    links:
      - mysql
      - mongo
      - redis

### PHP-FPM #########################################
  php-80:
    working_dir: /var/www
    build:
        context: ./docker-build/php-8.0
        dockerfile: Dockerfile
    container_name: php-80 #应用的mysql的镜像名称
    image: php-80
    restart: always #docker服务重启后nginx的docker容器也重启
    environment:
        LARAVEL_SAIL: 1
    volumes:
        - ${WORKSPACE}:/var/www:cached
    networks:
      - my_docker_net
    links:
      - mysql
      - mongo
      - redis
  php-81:
    working_dir: /var/www
    build:
        context: ./docker-build/php-8.1
        dockerfile: Dockerfile
    container_name: php-81 #应用的mysql的镜像名称
    image: php-81
    restart: always #docker服务重启后nginx的docker容器也重启
    environment:
        LARAVEL_SAIL: 1
    volumes:
        - ${WORKSPACE}:/var/www:cached
    networks:
      - my_docker_net
    links:
      - mysql
      - mongo
      - redis